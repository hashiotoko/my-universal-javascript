extend type Query {
  member(id: ID!): Member
  members(
    first: Int
    after: String
    last: Int
    before: String
    filter: MemberFilter
    orderBy: MemberOrder
  ): MemberConnection!
}

extend type Team {
  members(
    first: Int
    after: String
    last: Int
    before: String
    filter: MemberFilter
    orderBy: MemberOrder
  ): MemberConnection!
}

input MemberFilter {
  name: String
}

input MemberOrder {
  field: MemberOrderField!
  direction: OrderDirection!
}

enum MemberOrderField {
  NAME
}

type MemberConnection {
  edges: [MemberEdge]
  nodes: [Member]
  pageInfo: PageInfo!
  totalCount: Int!
}

type MemberEdge {
  node: Member
  cursor: String!
}

type Member {
  id: ID!
  name: String!
  roles: [MemberRole!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  team: Team!
}

enum MemberRole {
  ADMIN
  STUFF
}
